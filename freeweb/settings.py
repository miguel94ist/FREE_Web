"""
Django settings for freeweb project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import environ
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))

FREE_VERSION = '0.6.0'

SERVER_NAME = env.str('SERVER_NAME')


# SECURITY WARNING: don't run with debug turned on in production!
if env.bool('FREE_PRODUCTION'):
    DEBUG = False
    ALLOWED_HOSTS = env.list('FREE_ALLOWED_HOSTS')
    SECRET_KEY = env.str('FREE_SECRET')
else:
    DEBUG = True
    ALLOWED_HOSTS = ['*']
    SECRET_KEY = 'this-is-totally-insecure-secret-key'

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
CSRF_TRUSTED_ORIGINS = ['https://elab.vps.tecnico.ulisboa.pt:8000']

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'free',
    'rest_framework',
    'drf_yasg',
    'django_tables2',
    'django_summernote',
    'social_django', # required for oauth (Google, ...) athentication
    'free.videoConfig',
    'free.userAdmin',
    'sortedm2m',
    # APPARATUS TYPES BELOW
    'pendulum',
    'dev_MonteCarlo',
   'inclined_plane',
    'langmuir',
    'photovoltaic_panel',
    'cavity',
    'planck',
    'colisione',
    'mag3d',
    'polaroid',
    #Quiz apps

]
if env.bool('FREE_LTI_PROVIDER'):
    INSTALLED_APPS +=     [
    'FREE_quizes',
    'lti_provider',
    'semanticuiforms',
    ]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'freeweb.urls'

X_FRAME_OPTIONS = 'SAMEORIGIN'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'free.context_processors.free_extras.site_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'freeweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if env.str('DB_TYPE') == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
if env.str('DB_TYPE') == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env.str('POSTGRES_DB_NAME'),
            'USER' : env.str('POSTGRES_DB_USER'),
            'PASSWORD' : env.str('POSTGRES_DB_PASSWORD'),
            'HOST' : env.str('POSTGRES_DB_HOST'),
            'PORT' : env.str('POSTGRES_DB_PORT'),
            'CONN_MAX_AGE' : None
        }
    }

# Support reverse proxy in https 
if env.bool('FREE_REVERSE_PROXY'):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

LOCALE_PATHS = (
    os.path.join(PROJECT_DIR, 'locale'),
)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = 'free:index'
LOGOUT_REDIRECT_URL = 'free:index'

LOGIN_URL = 'free:login'


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('pt', _('Portuguese')),
    ('es', _('Spanish')),
]

LOCALE_PATHS = (
    os.path.join(PROJECT_DIR, 'locale'),
)

TIME_ZONE = env.str('TIME_ZONE','Europe/Lisbon')

USE_I18N = True

USE_L10N = True

USE_TZ = True

DJANGO_TABLES2_TEMPLATE = 'django_tables2/semantic.html'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = '/static/'

MEDIA_URL = '/images/'
MEDIA_ROOT =  os.path.join(BASE_DIR, 'free/media')

STATICFILES_DIRS = []

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': BASE_DIR / 'assets/webpack-stats.json'
    }
}

SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
      'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
      }
   }
}

#Social Login Configuration 

AUTHENTICATION_BACKENDS = (
   'django.contrib.auth.backends.ModelBackend',
)
    
if env.bool('FREE_MS_OAUTH'):
    AUTHENTICATION_BACKENDS += ('social_core.backends.microsoft.MicrosoftOAuth2',)

    SOCIAL_AUTH_MICROSOFT_GRAPH_KEY = env.str('SOCIAL_AUTH_MICROSOFT_GRAPH_KEY')
    SOCIAL_AUTH_MICROSOFT_GRAPH_SECRET = env.str('SOCIAL_AUTH_MICROSOFT_GRAPH_SECRET')
    SOCIAL_AUTH_MICROSOFT_GRAPH_PIPELINE = (
        'social_core.pipeline.social_auth.social_details',
        'social_core.pipeline.social_auth.social_uid',
        'social_core.pipeline.social_auth.social_user',
        'social_core.pipeline.user.get_username',
        'social_core.pipeline.social_auth.associate_by_email',
        'social_core.pipeline.user.create_user',
        'social_core.pipeline.social_auth.associate_user',
        'social_core.pipeline.social_auth.load_extra_data',
        'social_core.pipeline.user.user_details',
    )



   

if env.bool('FREE_GOOGLE_OAUTH'):
    AUTHENTICATION_BACKENDS += ('social_core.backends.google.GoogleOAuth2',)
    
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env.str('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env.str('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

    SOCIAL_AUTH_GOOGLE_OAUTH2_PIPELINE = (
        'social_core.pipeline.social_auth.social_details',
        'social_core.pipeline.social_auth.social_uid',
        'social_core.pipeline.social_auth.social_user',
        'social_core.pipeline.user.get_username',
        'social_core.pipeline.social_auth.associate_by_email',
        'social_core.pipeline.user.create_user',
        'social_core.pipeline.social_auth.associate_user',
        'social_core.pipeline.social_auth.load_extra_data',
        'social_core.pipeline.user.user_details',
    )
if env.bool('FREE_FENIX_OAUTH'):

    AUTHENTICATION_BACKENDS += ('free.auth_backends.fenix_auth.fenixOAuth2',)

    SOCIAL_AUTH_FENIX_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # <--- enable this one
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    )
    SOCIAL_AUTH_FENIX_USER_FIELDS = ['username', 'email', 'first_name']

    SOCIAL_AUTH_FENIX_AUTH_KEY=env.str('SOCIAL_AUTH_FENIX_AUTH_KEY')
    SOCIAL_AUTH_FENIX_AUTH_SECRET=env.str('SOCIAL_AUTH_FENIX_AUTH_SECRET')

if env.bool('FREE_LTI_PROVIDER'):

    AUTHENTICATION_BACKENDS += ('lti_provider.auth.LTIBackend',)

    LTI_TOOL_CONFIGURATION = {
        'title': '<your lti provider title>',
        'description': '<your description>',
        'launch_url': 'lti/',
        'embed_url': '', #'<the view endpoint for an embed tool>' 
        'embed_icon_url': '', #'<the icon url to use for an embed tool>' 
        'embed_tool_id': '', #'<the embed tool id>'
        'landing_url': '/', #<the view landing page>
        'course_aware': False,
        'course_navigation': True,
        'new_tab': False,
        'frame_width': 2048,
        'frame_height': 2048,
        'custom_fields': '',
        'allow_ta_access': True,
        'assignments': {
            '<name>': '<landing_url>',
            '<name>': '<landing_url>',
            '<name>': '<landing_url>',
            },
    }

PYLTI_CONFIG = {
    'consumers': {
        'abcdefghijklmnopqrst': {
            'secret': 'uvwxyz1234567890ABCD'
        },
        'uvwxyz1234567890ABCD':{
            'secret':'abcdefghijklmnopqrst'
        }
    }
}

JANUS_SERVER_ADDRESS=env.str('JANUS_SERVER_ADDRESS')
JANUS_STREAM_ADMIN_KEY = env.str('JANUS_STREAM_ADMIN_KEY')


PROJECT_NAME=env.str('PROJECT_NAME','World Pendulum Alliance')
PROJECT_ACRONYMUM=env.str('PROJECT_ACRONYMUM', 'WPA')
SITE_NAME=env.str('SITE_NAME','') 
if env.bool('CACHE'):
    if env.str('CACHE_TYPE') == 'locmemc':
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'LOCATION': 'unique-snowflake',
            }
        }
    if env.str('CACHE_TYPE') == 'memcached':
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                'LOCATION': '127.0.0.1:11211',
            }
        }

